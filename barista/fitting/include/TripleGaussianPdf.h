/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef TRIPLEGAUSSIANPDF
#define TRIPLEGAUSSIANPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
 
class TripleGaussianPdf : public RooAbsPdf {
  public:
  TripleGaussianPdf() {} ; 
  TripleGaussianPdf(const char *name, const char *title,
        RooAbsReal& _x,
        RooAbsReal& _mean,
        RooAbsReal& _s1,
        RooAbsReal& _s2,
        RooAbsReal& _s3,
        RooAbsReal& _aa,
        RooAbsReal& _bb);
  TripleGaussianPdf(const TripleGaussianPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new TripleGaussianPdf(*this,newname); }
  inline virtual ~TripleGaussianPdf() { }

  //Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  //Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  protected:

  RooRealProxy x ;
  RooRealProxy mean ;
  RooRealProxy s1 ;
  RooRealProxy s2 ;
  RooRealProxy s3 ;
  RooRealProxy aa ;
  RooRealProxy bb ;

  Double_t evaluate() const ;

  private:

  ClassDef(TripleGaussianPdf,1) // Your description goes here...
};
 
#endif
